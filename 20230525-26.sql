CREATE TABLE DEPT (
    DEPT_NO      NUMBER PRIMARY KEY,
    DEPT_NAME    VARCHAR2(20) NOT NULL,
    DEPT_ADDRESS VARCHAR2(100)
);

CREATE TABLE EMP ( -- 사원. 외래키를 참조한다.
    EMP_NO      NUMBER PRIMARY KEY,
    EMP_NAME    VARCHAR2(20) NOT NULL,
    DEPT_NO NUMBER NOT NULL,
    CONSTRAINT FK_DEPT_NO FOREIGN KEY(DEPT_NO) REFERENCES DEPT (DEPT_NO)  --외래키 지정
);

SELECT *FROM DEPT;
SELECT *FROM EMP;

INSERT INTO DEPT VALUES(1, '인사부', NULL);
INSERT INTO DEPT VALUES(2, '연구부', NULL);
INSERT INTO DEPT VALUES(3, '홍보부', NULL);

INSERT INTO EMP VALUES(1001, '정소화', 3);
INSERT INTO EMP VALUES(1002, '김용욱', 1);
INSERT INTO EMP VALUES(1003, '고명석', 2);
INSERT INTO EMP VALUES(1004, '김연아', 4); -- 부모테이블에 DEPT_NO 4가 없어서 오류남.

DROP TABLE EMP; -- 자식테이블 먼저 삭제해야함.
DROP TABLE DEPT; -- 부모테이블

DROP TABLE DEPT CASCADE CONSTRAINTS; -- 제약사항 무시하고 삭제(순서에 상관없이 삭제)
DROP TABLE EMP CASCADE CONSTRAINTS;

-- 기본키와 외래키 퀴즈

DROP TABLE CLASS;
DROP TABLE STUDENT;

CREATE TABLE CLASS(
    CLASS_NO NUMBER PRIMARY KEY NOT NULL,
    CLASS_NAME VARCHAR2(20) NOT NULL
);

CREATE TABLE STUDENT(
    STUDENT_NO NUMBER PRIMARY KEY NOT NULL,
    STUDENT_NAME VARCHAR2(20) NOT NULL
);

INSERT INTO CLASS VALUES(1001, '수학');
INSERT INTO CLASS VALUES(1002, '국어');

INSERT INTO STUDENT VALUES(2001, '정소화');
INSERT INTO STUDENT VALUES(2002, '김용욱');
INSERT INTO STUDENT VALUES(2003, '고명석');

CREATE TABLE CLASS_STUDENT(
    CS_NO NUMBER PRIMARY KEY NOT NULL,
    CLASS_NO NUMBER NOT NULL,
    STUDENT_NO NUMBER NOT NULL,
    CONSTRAINT FK_CLASS_NO FOREIGN KEY(CLASS_NO) REFERENCES CLASS(CLASS_NO),
    CONSTRAINT FK_STUDENT_NO FOREIGN KEY(STUDENT_NO) REFERENCES STUDENT(STUDENT_NO)
);

INSERT INTO CLASS_STUDENT VALUES(1, 1001, 2001);
INSERT INTO CLASS_STUDENT VALUES(2, 1002, 2001);
INSERT INTO CLASS_STUDENT VALUES(3, 1001, 2002);
INSERT INTO CLASS_STUDENT VALUES(4, 1002, 2002);
INSERT INTO CLASS_STUDENT VALUES(5, 1002, 2003);

SELECT * FROM CLASS_STUDENT;

-------------------------- JOIN

CREATE TABLE ACADEMY_A (
    STUDENT_NO NUMBER PRIMARY KEY,
    STUDENT_NAME VARCHAR2(20) NOT NULL
);

INSERT INTO ACADEMY_A VALUES(1001, '정소화');
INSERT INTO ACADEMY_A VALUES(1002, '김용욱');
INSERT INTO ACADEMY_A VALUES(1003, '고명석');
INSERT INTO ACADEMY_A VALUES(1004, '김연아');

CREATE TABLE ACADEMY_B (
    STUDENT_NO NUMBER PRIMARY KEY,
    STUDENT_NAME VARCHAR2(20) NOT NULL
);

INSERT INTO ACADEMY_B VALUES(1003, '고명석');
INSERT INTO ACADEMY_B VALUES(1004, '김연아');
INSERT INTO ACADEMY_B VALUES(1005, '김태환');
INSERT INTO ACADEMY_B VALUES(1006, '이윤아');

SELECT * FROM ACADEMY_A;
SELECT * FROM ACADEMY_B;

-- EQUI 조인: 두 테이블에서 컬럼의 값이 일치되는 행을 연결 
SELECT T1.STUDENT_NO, T1.STUDENT_NAME 
FROM  ACADEMY_A T1, ACADEMY_B T2
WHERE T1.STUDENT_NO = T2.STUDENT_NO; 

-- NON-EQUI 조인: =가 아닌 것을 사용
SELECT *
FROM  ACADEMY_A T1, ACADEMY_B T2
WHERE T1.STUDENT_NO >= T2.STUDENT_NO; 

-- INNER 조인: 교집합
SELECT *
FROM ACADEMY_A T1
JOIN ACADEMY_B T2
ON T1.STUDENT_NO = T2.STUDENT_NO;

-- LEFT 조인: 왼쪽 테이블의 모든 레코드를 가져오고 오른쪽 테이블은 공통된 것만 가져온다.
SELECT * 
FROM ACADEMY_A T1
LEFT JOIN ACADEMY_B T2
ON T1.STUDENT_NO = T2.STUDENT_NO;

-- RIGHT 조인: 오른쪽 테이블의 모든 레코드를 가져오고 왼쪽 테이블은 공통된 것만 가져온다.
SELECT * 
FROM ACADEMY_A T1
RIGHT JOIN ACADEMY_B T2
ON T1.STUDENT_NO = T2.STUDENT_NO;

-- OUTER 조인: 합집합. 존재하지 않는 레코드는 NULL로 출력.
SELECT *
FROM ACADEMY_A T1
FULL OUTER JOIN ACADEMY_B T2
ON T1.STUDENT_NO = T2.STUDENT_NO;

-- NATURAL 조인: 같은 이름을 가진 컬럼의 동일한 데이터만 출력
SELECT *
FROM ACADEMY_A T1
NATURAL JOIN ACADEMY_B T2;

-- 테이블 JOIN 퀴즈

DROP TABLE EMP;
DROP TABLE DEPT;
CREATE TABLE DEPT (
    DEPT_NO      NUMBER PRIMARY KEY,
    DEPT_NAME    VARCHAR2(20) NOT NULL
);
CREATE TABLE EMP (
    EMP_NO      NUMBER PRIMARY KEY,
    EMP_NAME    VARCHAR2(20) NOT NULL,
    DEPT_NO NUMBER NOT NULL,
    CONSTRAINT FK_DEPT_NO FOREIGN KEY(DEPT_NO) REFERENCES DEPT (DEPT_NO)
);
INSERT INTO DEPT VALUES (1, '인사부');
INSERT INTO DEPT VALUES (2, '연구부');
INSERT INTO DEPT VALUES (3, '홍보부');
INSERT INTO EMP VALUES (1001, '정소화', 3);
INSERT INTO EMP VALUES (1002, '김용욱', 1);
INSERT INTO EMP VALUES (1003, '고명석', 2);

SELECT T1.DEPT_NAME, T2.EMP_NAME
FROM DEPT T1
JOIN EMP T2
ON T1.DEPT_NO = T2.DEPT_NO;

-- 퀴즈 INNER 조인 방식
SELECT T3.STUDENT_NO, T3.STUDENT_NAME, T2.CLASS_NAME
FROM CLASS_STUDENT T1
JOIN CLASS T2
ON T1.CLASS_NO = T2.CLASS_NO
JOIN STUDENT T3
ON T1.STUDENT_NO = T3.STUDENT_NO;

-- 퀴즈 EQUI 방식
SELECT T3.STUDENT_NO, T3.STUDENT_NAME, T2.CLASS_NAME
FROM CLASS_STUDENT T1, CLASS T2, STUDENT T3
WHERE T1.CLASS_NO = T2.CLASS_NO
AND T1.STUDENT_NO = T3.STUDENT_NO;

------------------- 집합연산자 -------------------

-- UNION ALL: 중복을 포함해서 조회
SELECT * FROM ACADEMY_A
UNION ALL
SELECT * FROM ACADEMY_B;

-- UNION: 중복을 제거해서 조회
SELECT * FROM ACADEMY_A
UNION 
SELECT * FROM ACADEMY_B;

-- INTERSECT: 공통된 부분만 중복 제거해서 조회
SELECT * FROM ACADEMY_A
INTERSECT
SELECT * FROM ACADEMY_B;

-- MINUS: A테이블에서 공통된 부분을 포함한 B테이블을 제거하고 조회
SELECT * FROM ACADEMY_A
MINUS
SELECT * FROM ACADEMY_B;

-- GROUP BY, HAVING, ORDER BY
SELECT TYPE, COUNT(NAME) AS COUNT
FROM GIFT
GROUP BY TYPE
HAVING COUNT(NAME) >=2
ORDER BY TYPE;
